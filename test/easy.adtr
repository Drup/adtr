type foo = A (foo)

down (x : foo) : foo = rewrite x {
  | A (t) -> t
}
(*EXPECT
down (x : foo) : foo = rewrite x {
  | (t[]:foo | .foo@0^k₀ ← .foo@0^(k₀ + 1))
}

Schedule: t[] -> (k₀ + 0*N)

*)

up (x : foo) : foo = rewrite x {
  | t -> A (t)
}
(*EXPECT
up (x : foo) : foo = rewrite x {
  | (t[]:foo | .foo@0^(k₁ + 1) ← .foo@0^k₁)
}

Schedule: t[] -> (-1*k₁ + N + -1)

*)

type foo2 = X (int, foo2) | Y (foo2)

side (x : foo2) : foo2 = rewrite x {
  | X (i,t) -> Y (t)
}
(*EXPECT
side (x : foo2) : foo2 = rewrite x {
  | (t:foo2 | .foo2@0.φ^k₂ ← t:.foo2@1.φ^k₂)
}

Schedule: t -> ()

*)

lift (x : foo2) : foo2 = rewrite x {
  | Y (t) -> X (0,t)
}
(*EXPECT
lift (x : foo2) : foo2 = rewrite x {
  | (const₀:int | .int@0 ← 0)
    (t:foo2 | .foo2@1.φ^k₃ ← t:.foo2@0.φ^k₃)
}

Schedule: const₀ -> ()
          t -> ()

*)
