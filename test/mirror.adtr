type tree = Leaf (int) | Node (tree,int,tree)

mirror (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (a,i,b) -> Node (b,i,a)
}
(*EXPECT
mirror (t : tree) : tree = rewrite t {
  | (i:int -- Cell(.Leaf-0) → Cell(.Leaf-0))
  | (a:tree -- Layer(k0,.Node-0) → Layer(k0,.Node-2))
    (b:tree -- Layer(k1,.Node-2) → Layer(k1,.Node-0))
    (i:int -- Cell(.Node-1) → Cell(.Node-1))
}

*)

mirror2 (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (a,i,Node(b1,j,b2)) -> Node (Node(b2,j,b1),i,a)
}
(*EXPECT

mirror2 (t : tree) : tree = rewrite t {
  | (i:int -- Cell(.Leaf-0) → Cell(.Leaf-0))
  | (a:tree -- Layer(k2,.Node-0) → Layer(k2,.Node-2))
    (b1:tree -- Layer(k3,.Node-2.Node-0) → Layer(k3,.Node-0.Node-2))
    (b2:tree -- Layer(k4,.Node-2.Node-2) → Layer(k4,.Node-0.Node-0))
    (i:int -- Cell(.Node-1) → Cell(.Node-1))
    (j:int -- Cell(.Node-2.Node-1) → Cell(.Node-0.Node-1))
}

*)

mirror3 (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (Node(a1,ia,a2),i,Node(b1,ib,b2)) ->
    Node (Node(b2,ib,b1),i,Node(a2,ia,a1))
}
(*EXPECT

mirror3 (t : tree) : tree = rewrite t {
  | (i:int -- Cell(.Leaf-0) → Cell(.Leaf-0))
  | (a1:tree -- Layer(k5,.Node-0.Node-0) → Layer(k5,.Node-2.Node-2))
    (a2:tree -- Layer(k6,.Node-0.Node-2) → Layer(k6,.Node-2.Node-0))
    (b1:tree -- Layer(k7,.Node-2.Node-0) → Layer(k7,.Node-0.Node-2))
    (b2:tree -- Layer(k8,.Node-2.Node-2) → Layer(k8,.Node-0.Node-0))
    (i:int -- Cell(.Node-1) → Cell(.Node-1))
    (ia:int -- Cell(.Node-0.Node-1) → Cell(.Node-2.Node-1))
    (ib:int -- Cell(.Node-2.Node-1) → Cell(.Node-0.Node-1))
}

*)

type tree3 = LeafX (int) | NodeX (tree,tree,tree)

mirror (t:tree3) : tree3 = rewrite t {
  | LeafX (i) -> LeafX (i)
  | NodeX (a,b,c) -> NodeX (c,a,b)
}
(*EXPECT

mirror (t : tree3) : tree3 = rewrite t {
  | (i:int -- Cell(.LeafX-0) → Cell(.LeafX-0))
  | (a:tree -- Layer(k9,.NodeX-0) → Layer(k9,.NodeX-1))
    (b:tree -- Layer(k10,.NodeX-1) → Layer(k10,.NodeX-2))
    (c:tree -- Layer(k11,.NodeX-2) → Layer(k11,.NodeX-0))
}

*)

