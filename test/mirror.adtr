type tree = Leaf (int) | Node (tree,int,tree)

mirror (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (a,i,b) -> Node (b,i,a)
}
(*EXPECT
mirror (t : tree) : tree = rewrite t {
  | 
  | (a:tree | .tree@2.φ^k₀ ← .tree@0.φ^k₀)
    (b:tree | .tree@0.φ^k₁ ← .tree@2.φ^k₁)
}

*)

mirror2 (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (a,i,Node(b1,j,b2)) -> Node (Node(b2,j,b1),i,a)
}
(*EXPECT

mirror2 (t : tree) : tree = rewrite t {
  | 
  | (a:tree | .tree@2.φ^k₂ ← .tree@0.φ^k₂)
    (b1:tree | .tree@0.tree@2.φ^k₃ ← .tree@2.tree@0.φ^k₃)
    (b2:tree | .tree@0.tree@0.φ^k₄ ← .tree@2.tree@2.φ^k₄)
    (j:int | .tree@0.int@1 ← .tree@2.int@1)
}

*)

mirror3 (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (Node(a1,ia,a2),i,Node(b1,ib,b2)) ->
    Node (Node(b2,ib,b1),i,Node(a2,ia,a1))
}
(*EXPECT

mirror3 (t : tree) : tree = rewrite t {
  | 
  | (a1:tree | .tree@2.tree@2.φ^k₅ ← .tree@0.tree@0.φ^k₅)
    (a2:tree | .tree@2.tree@0.φ^k₆ ← .tree@0.tree@2.φ^k₆)
    (b1:tree | .tree@0.tree@2.φ^k₇ ← .tree@2.tree@0.φ^k₇)
    (b2:tree | .tree@0.tree@0.φ^k₈ ← .tree@2.tree@2.φ^k₈)
    (ia:int | .tree@2.int@1 ← .tree@0.int@1)
    (ib:int | .tree@0.int@1 ← .tree@2.int@1)
}

*)

type tree3 = LeafX (int) | NodeX (tree,tree,tree)

mirror (t:tree3) : tree3 = rewrite t {
  | LeafX (i) -> LeafX (i)
  | NodeX (a,b,c) -> NodeX (c,a,b)
}
(*EXPECT

mirror (t : tree3) : tree3 = rewrite t {
  | 
  | (a:tree | .tree@1.φ^k₉ ← .tree@0.φ^k₉)
    (b:tree | .tree@2.φ^k₁₀ ← .tree@1.φ^k₁₀)
    (c:tree | .tree@0.φ^k₁₁ ← .tree@2.φ^k₁₁)
}

*)

