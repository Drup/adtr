type tree = Leaf (int) | Node (tree,int,tree)

mirror (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (a,i,b) -> Node (b,i,a)
}
(*EXPECT
mirror (t : tree) : tree = rewrite t {
  | 
  | (a₀:tree | .tree@2.φ^k₀ ← a:.tree@0.φ^k₀)
    (b₀:tree | .tree@0.φ^k₁ ← b:.tree@2.φ^k₁)
}

Schedule: 
Schedule: None

*)

mirror2 (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (a,i,Node(b1,j,b2)) -> Node (Node(b2,j,b1),i,a)
}
(*EXPECT
mirror2 (t : tree) : tree = rewrite t {
  | 
  | (a₁:tree | .tree@2.φ^k₂ ← a:.tree@0.φ^k₂)
    (b1₀:tree | .tree@0.tree@2.φ^k₃ ← b1:.tree@2.tree@0.φ^k₃)
    (b2₀:tree | .tree@0.tree@0.φ^k₄ ← b2:.tree@2.tree@2.φ^k₄)
    (j₀:int | .tree@0.int@1 ← j:.tree@2.int@1)
}

Schedule: 
Schedule: None

*)

mirror3 (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (Node(a1,ia,a2),i,Node(b1,ib,b2)) ->
    Node (Node(b2,ib,b1),i,Node(a2,ia,a1))
}
(*EXPECT
mirror3 (t : tree) : tree = rewrite t {
  | 
  | (a1₀:tree | .tree@2.tree@2.φ^k₅ ← a1:.tree@0.tree@0.φ^k₅)
    (a2₀:tree | .tree@2.tree@0.φ^k₆ ← a2:.tree@0.tree@2.φ^k₆)
    (b1₁:tree | .tree@0.tree@2.φ^k₇ ← b1:.tree@2.tree@0.φ^k₇)
    (b2₁:tree | .tree@0.tree@0.φ^k₈ ← b2:.tree@2.tree@2.φ^k₈)
    (ia₀:int | .tree@2.int@1 ← ia:.tree@0.int@1)
    (ib₀:int | .tree@0.int@1 ← ib:.tree@2.int@1)
}

Schedule: 
Schedule: None

*)

type tree3 = LeafX (int) | NodeX (tree,tree,tree)

mirror (t:tree3) : tree3 = rewrite t {
  | LeafX (i) -> LeafX (i)
  | NodeX (a,b,c) -> NodeX (c,a,b)
}
(*EXPECT
mirror (t : tree3) : tree3 = rewrite t {
  | 
  | (a₂:tree | .tree@1.φ^k₉ ← a:.tree@0.φ^k₉)
    (b₁:tree | .tree@2.φ^k₁₀ ← b:.tree@1.φ^k₁₀)
    (c₀:tree | .tree@0.φ^k₁₁ ← c:.tree@2.φ^k₁₁)
}

Schedule: 
Schedule: None

*)
