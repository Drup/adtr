type tree = Leaf (int) | Node (tree,int,tree)

mirror (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (a,i,b) -> Node (b,i,a)
}
(*EXPECT
mirror (t : tree) : tree = rewrite t {
  | (i:int | .int@0 → .int@0)
  | (a:tree | .tree@0.φ^k0 → .tree@2.φ^k0)
    (b:tree | .tree@2.φ^k1 → .tree@0.φ^k1)
    (i:int | .int@1 → .int@1)
}

*)

mirror2 (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (a,i,Node(b1,j,b2)) -> Node (Node(b2,j,b1),i,a)
}
(*EXPECT

mirror2 (t : tree) : tree = rewrite t {
  | (i:int | .int@0 → .int@0)
  | (a:tree | .tree@0.φ^k2 → .tree@2.φ^k2)
    (b1:tree | .tree@2.tree@0.φ^k3 → .tree@0.tree@2.φ^k3)
    (b2:tree | .tree@2.tree@2.φ^k4 → .tree@0.tree@0.φ^k4)
    (i:int | .int@1 → .int@1)
    (j:int | .tree@2.int@1 → .tree@0.int@1)
}

*)

mirror3 (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (Node(a1,ia,a2),i,Node(b1,ib,b2)) ->
    Node (Node(b2,ib,b1),i,Node(a2,ia,a1))
}
(*EXPECT

mirror3 (t : tree) : tree = rewrite t {
  | (i:int | .int@0 → .int@0)
  | (a1:tree | .tree@0.tree@0.φ^k5 → .tree@2.tree@2.φ^k5)
    (a2:tree | .tree@0.tree@2.φ^k6 → .tree@2.tree@0.φ^k6)
    (b1:tree | .tree@2.tree@0.φ^k7 → .tree@0.tree@2.φ^k7)
    (b2:tree | .tree@2.tree@2.φ^k8 → .tree@0.tree@0.φ^k8)
    (i:int | .int@1 → .int@1)
    (ia:int | .tree@0.int@1 → .tree@2.int@1)
    (ib:int | .tree@2.int@1 → .tree@0.int@1)
}

*)

type tree3 = LeafX (int) | NodeX (tree,tree,tree)

mirror (t:tree3) : tree3 = rewrite t {
  | LeafX (i) -> LeafX (i)
  | NodeX (a,b,c) -> NodeX (c,a,b)
}
(*EXPECT

mirror (t : tree3) : tree3 = rewrite t {
  | (i:int | .int@0 → .int@0)
  | (a:tree | .tree@0.φ^k9 → .tree@1.φ^k9)
    (b:tree | .tree@1.φ^k10 → .tree@2.φ^k10)
    (c:tree | .tree@2.φ^k11 → .tree@0.φ^k11)
}

*)

