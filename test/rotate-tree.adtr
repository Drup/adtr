type tree = Leaf (int) | Node (tree,int,tree)

rotate (t:tree) : tree = rewrite t {
  | Leaf (i) -> Leaf (i)
  | Node (Node(a,i1,Node(b,i2,c)),i3,d) ->
    Node (Node(a,i1,b),i2,Node(c,i3,d))
  | Node (Node(Node(a,i1,b),i2,c),i3,d) ->
    Node (Node(a,i1,b),i2,Node(c,i3,d))
}
(*EXPECT
rotate (t : tree) : tree = rewrite t {
  | 
  | (b[]:tree | .tree@0.tree@2.tree@0^(k0 + 1) → .tree@0.tree@2.tree@0^k0)
    (b.int@0:int |
     .tree@0.tree@2.tree@0^(k0 + 1).int@0 →
     .tree@0.tree@2.tree@0^k0.int@0)
    (b.int@1:int |
     .tree@0.tree@2.tree@0^(k0 + 1).int@1 →
     .tree@0.tree@2.tree@0^k0.int@1)
    (b.tree@2:tree |
     .tree@0.tree@2.tree@0^(k0 + 1).tree@2.φ^k1 →
     .tree@0.tree@2.tree@0^k0.tree@2.φ^k1)
    (c:tree | .tree@0.tree@2.tree@2.φ^k2 → .tree@2.tree@0.φ^k2)
    (d[]:tree | .tree@2^(k3 + 1) → .tree@2^(k3 + 2))
    (d.int@0:int | .tree@2^(k3 + 1).int@0 → .tree@2^(k3 + 2).int@0)
    (d.int@1:int | .tree@2^(k3 + 1).int@1 → .tree@2^(k3 + 2).int@1)
    (d.tree@0:tree |
     .tree@2^(k3 + 1).tree@0.φ^k4 →
     .tree@2^(k3 + 2).tree@0.φ^k4)
    (i2:int | .tree@0.tree@2.int@1 → .int@1)
    (i3:int | .int@1 → .tree@2.int@1)
  | (a[]:tree | .tree@0^(k5 + 3) → .tree@0^(k5 + 2))
    (a.int@0:int | .tree@0^(k5 + 3).int@0 → .tree@0^(k5 + 2).int@0)
    (a.int@1:int | .tree@0^(k5 + 3).int@1 → .tree@0^(k5 + 2).int@1)
    (a.tree@2:tree |
     .tree@0^(k5 + 3).tree@2.φ^k6 →
     .tree@0^(k5 + 2).tree@2.φ^k6)
    (b:tree | .tree@0.tree@0.tree@2.φ^k7 → .tree@0.tree@2.φ^k7)
    (c:tree | .tree@0.tree@2.φ^k8 → .tree@2.tree@0.φ^k8)
    (d[]:tree | .tree@2^(k9 + 1) → .tree@2^(k9 + 2))
    (d.int@0:int | .tree@2^(k9 + 1).int@0 → .tree@2^(k9 + 2).int@0)
    (d.int@1:int | .tree@2^(k9 + 1).int@1 → .tree@2^(k9 + 2).int@1)
    (d.tree@0:tree |
     .tree@2^(k9 + 1).tree@0.φ^k10 →
     .tree@2^(k9 + 2).tree@0.φ^k10)
    (i1:int | .tree@0.tree@0.int@1 → .tree@0.int@1)
    (i2:int | .tree@0.int@1 → .int@1)
    (i3:int | .int@1 → .tree@2.int@1)
}

*)

