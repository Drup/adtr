type tree = Leaf (int) | Node (tree,tree)

pull_up (t:tree) : tree = rewrite t {
 | Node(a,Node(b,c)) -> Node(b,c)
}
(*EXPECT
pull_up (t : tree) : tree = rewrite t {
  | (a:tree | .tree@0.φ^k₀ → ø)
    (b:tree | .tree@1.tree@0.φ^k₁ → .tree@0.φ^k₁)
    (c[]:tree | .tree@1^(k₂ + 2) → .tree@1^(k₂ + 1))
    (c.int@0:int | .tree@1^(k₂ + 2).int@0 → .tree@1^(k₂ + 1).int@0)
    (c.tree@0:tree |
     .tree@1^(k₂ + 2).tree@0.φ^k₃ →
     .tree@1^(k₂ + 1).tree@0.φ^k₃)
}

*)

