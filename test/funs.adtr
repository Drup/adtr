type list = Nil () | Cons (int, list)

incr1 (l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (i+i,rest)
}
(*EXPECT
incr1 (l : list) : list = rewrite l {
  | 
  | (+₀:int | .int@0 ← +(.int@0, .int@0))
}

*)

map1 (f : int -> int, l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (f(i),rest)
}
(*EXPECT

map1 (f : int -> int, l : list) : list = rewrite l {
  | 
  | (f₀:int | .int@0 ← f(.int@0))
}

*)


mapwrong (f : int -> int, l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (f(rest),rest)
}
(*EXPECT
Error: The type int was expected, but we got type list
*)

mapwrong2 (f : list -> list, l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (i,f(rest))
}
(*EXPECT
Error: Not supported : (f₂:list | .list@1 ← f(.list@1))
*)

