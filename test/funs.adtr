type list = Nil () | Cons (int, list)

incr1 (l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (i+i,rest)
}
(*EXPECT
incr1 (l : list) : list = rewrite l {
  | 
  | (+₀:int | +(.int@0, .int@0) → .int@0)
}

*)

map1 (f : int -> int, l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (f(i),rest)
}
(*EXPECT

map1 (f : int -> int, l : list) : list = rewrite l {
  | 
  | (f₀:int | f(.int@0) → .int@0)
}

*)

