type list = Nil () | Cons (int, list)

incr1 (l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (i+i,rest)
}
(*EXPECT
incr1 (l : list) : list = rewrite l {
  | 
  | (+₀:int | .int@0 ← +(i:.int@0, i:.int@0))
}

Schedule: 
Schedule: None

*)

incr2 (l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (i+i,Cons(i,rest))
}
(*EXPECT
incr2 (l : list) : list = rewrite l {
  | 
  | (+₁:int | .int@0 ← +(i:.int@0, i:.int@0))
    (i₀:int | .list@1.int@0 ← i:.int@0)
    (rest[]₀:list | .list@1^(k₀ + 2) ← .list@1^(k₀ + 1))
    (rest.int@0₀:int | .list@1^(k₀ + 2).int@0 ← .list@1^(k₀ + 1).int@0)
}

Schedule: 
Schedule: None

*)

map1 (f : int -> int, l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (f(i),rest)
}
(*EXPECT
map1 (f : int -> int, l : list) : list = rewrite l {
  | 
  | (f₀:int | .int@0 ← f(i:.int@0))
}

Schedule: 
Schedule: None

*)


mapwrong (f : int -> int, l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (f(rest),rest)
}
(*EXPECT
Error: The type int was expected, but we got type list
*)

mapwrong2 (f : list -> list, l : list) : list = rewrite l {
  | Nil -> Nil
  | Cons (i,rest) -> Cons (i,f(rest))
}
(*EXPECT
Error: Not supported : (f₂:list | .list@1 ← f(rest:.list@1))
*)
